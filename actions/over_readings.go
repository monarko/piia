package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/monarko/piia/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (OverReading)
// DB Table: Plural (over_readings)
// Resource: Plural (OverReadings)
// Path: Plural (/over_readings)
// View Template Folder: Plural (/templates/over_readings/)

// OverReadingsResource is the resource for the OverReading model
type OverReadingsResource struct {
	buffalo.Resource
}

// List gets all OverReadings. This function is mapped to the path
// GET /over_readings
func (v OverReadingsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	overReadings := &models.OverReadings{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all OverReadings from the DB
	if err := q.All(overReadings); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, overReadings))
}

// Show gets the data for one OverReading. This function is mapped to
// the path GET /over_readings/{over_reading_id}
func (v OverReadingsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty OverReading
	overReading := &models.OverReading{}

	// To find the OverReading the parameter over_reading_id is used.
	if err := tx.Find(overReading, c.Param("over_reading_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, overReading))
}

// New renders the form for creating a new OverReading.
// This function is mapped to the path GET /over_readings/new
func (v OverReadingsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.OverReading{}))
}

// Create adds a OverReading to the DB. This function is mapped to the
// path POST /over_readings
func (v OverReadingsResource) Create(c buffalo.Context) error {
	// Allocate an empty OverReading
	overReading := &models.OverReading{}

	// Bind overReading to the html form elements
	if err := c.Bind(overReading); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(overReading)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, overReading))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "OverReading was created successfully")

	// and redirect to the over_readings index page
	return c.Render(201, r.Auto(c, overReading))
}

// Edit renders a edit form for a OverReading. This function is
// mapped to the path GET /over_readings/{over_reading_id}/edit
func (v OverReadingsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty OverReading
	overReading := &models.OverReading{}

	if err := tx.Find(overReading, c.Param("over_reading_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, overReading))
}

// Update changes a OverReading in the DB. This function is mapped to
// the path PUT /over_readings/{over_reading_id}
func (v OverReadingsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty OverReading
	overReading := &models.OverReading{}

	if err := tx.Find(overReading, c.Param("over_reading_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind OverReading to the html form elements
	if err := c.Bind(overReading); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(overReading)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, overReading))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "OverReading was updated successfully")

	// and redirect to the over_readings index page
	return c.Render(200, r.Auto(c, overReading))
}

// Destroy deletes a OverReading from the DB. This function is mapped
// to the path DELETE /over_readings/{over_reading_id}
func (v OverReadingsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty OverReading
	overReading := &models.OverReading{}

	// To find the OverReading the parameter over_reading_id is used.
	if err := tx.Find(overReading, c.Param("over_reading_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(overReading); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "OverReading was destroyed successfully")

	// Redirect to the over_readings index page
	return c.Render(200, r.Auto(c, overReading))
}
